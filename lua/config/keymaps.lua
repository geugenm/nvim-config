-- Keymaps are automatically loaded on the VeryLazy event
-- Default keymaps that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/keymaps.lua
-- Add any additional keymaps here

local function lumen_commit_push()
    local function log(msg, level)
        vim.notify(msg, level or vim.log.levels.INFO)
    end

    -- Create a buffer for editing commit message
    local function create_commit_edit_buffer(message, callback)
        -- Create new buffer
        local buf = vim.api.nvim_create_buf(false, true)
        vim.api.nvim_buf_set_option(buf, 'buftype', 'nofile')
        vim.api.nvim_buf_set_option(buf, 'bufhidden', 'wipe')
        vim.api.nvim_buf_set_option(buf, 'swapfile', false)
        vim.api.nvim_buf_set_option(buf, 'filetype', 'gitcommit')

        -- Set the generated message as content
        vim.api.nvim_buf_set_lines(buf, 0, -1, true, vim.split(message, '\n'))

        -- Calculate dimensions for floating window
        local width = math.min(80, math.floor(vim.o.columns * 0.8))
        local height = math.min(20, math.floor(vim.o.lines * 0.7))
        local col = math.floor((vim.o.columns - width) / 2)
        local row = math.floor((vim.o.lines - height) / 2)

        -- Create floating window
        local win = vim.api.nvim_open_win(buf, true, {
            relative = 'editor',
            width = width,
            height = height,
            col = col,
            row = row,
            border = 'rounded',
            style = 'minimal',
        })

        -- Set window title
        vim.api.nvim_win_set_option(win, 'winblend', 0)
        vim.api.nvim_win_set_option(win, 'winhighlight', 'NormalFloat:Normal')

        -- Add descriptive text at the top
        local help_text = {
            '# Edit commit message (generated by lumen)',
            '# Press <Enter> to confirm or <Esc> to cancel',
            '#',
            '',
        }
        vim.api.nvim_buf_set_lines(buf, 0, 0, true, help_text)

        -- Set cursor after the help text
        vim.api.nvim_win_set_cursor(win, { #help_text + 1, 0 })

        -- Enter insert mode
        vim.cmd('startinsert')

        -- Map keys
        local opts = { noremap = true, silent = true, buffer = buf }

        -- Confirm with Enter
        vim.keymap.set('i', '<CR>', function()
            -- Get the message without the help text
            local lines = vim.api.nvim_buf_get_lines(buf, #help_text, -1, false)
            local final_message = table.concat(lines, '\n')
            vim.api.nvim_win_close(win, true)
            callback(final_message)
        end, opts)

        -- Cancel with Escape
        vim.keymap.set({ 'i', 'n' }, '<Esc>', function()
            vim.api.nvim_win_close(win, true)
            log('commit cancelled', vim.log.levels.WARN)
        end, opts)
    end

    local function run_cmd(cmd, opts)
        opts = opts or {}
        local stdout_data = {}
        local stderr_data = {}

        vim.fn.jobstart(cmd, {
            stdout_buffered = true,
            on_stdout = function(_, data)
                if data and #data > 0 then
                    for _, line in ipairs(data) do
                        if line ~= '' then
                            table.insert(stdout_data, line)
                        end
                    end
                end
            end,
            on_stderr = function(_, data)
                if data and #data > 0 then
                    for _, line in ipairs(data) do
                        if line ~= '' then
                            table.insert(stderr_data, line)
                        end
                    end
                end
            end,
            on_exit = function(_, code)
                if code == 0 then
                    if opts.on_success then
                        opts.on_success(stdout_data)
                    end
                else
                    local err = #stderr_data > 0
                            and table.concat(stderr_data, '\n')
                        or string.format('exited with code %d', code)
                    if opts.on_error then
                        opts.on_error(err)
                    else
                        log(
                            string.format('%s failed: %s', opts.name, err),
                            vim.log.levels.ERROR
                        )
                    end
                end
            end,
        })
    end

    -- Generate commit message with lumen
    run_cmd('lumen draft', {
        name = 'lumen draft',
        on_success = function(output)
            if #output == 0 then
                return log(
                    'lumen draft produced no output',
                    vim.log.levels.ERROR
                )
            end

            local commit_message = output[1]
            log(string.format('generated commit message: %s', commit_message))

            -- Open edit buffer with the generated message
            create_commit_edit_buffer(commit_message, function(edited_message)
                if edited_message and #edited_message > 0 then
                    -- Commit changes with edited message
                    run_cmd(
                        string.format(
                            'git commit -m %s',
                            vim.fn.shellescape(edited_message)
                        ),
                        {
                            name = 'git commit',
                            on_success = function()
                                log('commit successful')

                                -- Push changes
                                run_cmd('git push', {
                                    name = 'git push',
                                    on_success = function()
                                        log('push successful')
                                    end,
                                    on_error = function(err)
                                        log(
                                            string.format(
                                                'git push failed: %s',
                                                err
                                            ),
                                            vim.log.levels.ERROR
                                        )
                                    end,
                                })
                            end,
                            on_error = function(err)
                                log(
                                    string.format('git commit failed: %s', err),
                                    vim.log.levels.ERROR
                                )
                            end,
                        }
                    )
                else
                    log('empty commit message, aborting', vim.log.levels.WARN)
                end
            end)
        end,
        on_error = function(err)
            log(
                string.format('lumen draft failed: %s', err),
                vim.log.levels.ERROR
            )
        end,
    })
end

vim.keymap.set(
    'n',
    '<leader>ga',
    lumen_commit_push,
    { desc = 'AI commit and push (lumen)' }
)
