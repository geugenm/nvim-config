-- Keymaps are automatically loaded on the VeryLazy event
-- Default keymaps that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/keymaps.lua
-- Add any additional keymaps here

local function lumen_commit_push()
    -- Helper function for logging
    local function log(msg, level)
        vim.notify(msg, level or vim.log.levels.INFO)
    end

    -- Execute git commands after editing
    local function execute_git_commands(message)
        if not message or message:match('^%s*$') then
            return log('empty commit message, aborting', vim.log.levels.WARN)
        end

        -- Commit with the edited message
        local commit_cmd =
            string.format('git commit -m %s', vim.fn.shellescape(message))
        local commit_job = vim.fn.jobstart(commit_cmd, {
            on_exit = function(_, code)
                if code == 0 then
                    log('commit successful')

                    -- Push changes after successful commit
                    local push_job = vim.fn.jobstart('git push', {
                        on_exit = function(_, push_code)
                            if push_code == 0 then
                                log('push successful')
                            else
                                log(
                                    'push failed with code: ' .. push_code,
                                    vim.log.levels.ERROR
                                )
                            end
                        end,
                        on_stderr = function(_, data)
                            if data and #data > 0 then
                                log(
                                    'push error: ' .. table.concat(data, '\n'),
                                    vim.log.levels.ERROR
                                )
                            end
                        end,
                    })
                else
                    log(
                        'commit failed with code: ' .. code,
                        vim.log.levels.ERROR
                    )
                end
            end,
            on_stderr = function(_, data)
                if data and #data > 0 then
                    log(
                        'commit error: ' .. table.concat(data, '\n'),
                        vim.log.levels.ERROR
                    )
                end
            end,
        })
    end

    -- Run lumen to generate the commit message
    local draft_job = vim.fn.jobstart('lumen draft', {
        stdout_buffered = true,
        on_stdout = function(_, data)
            if not data or #data == 0 or not data[1] or data[1] == '' then
                return log(
                    'failed to generate commit message',
                    vim.log.levels.ERROR
                )
            end

            local commit_msg = data[1]
            log('lumen generated commit message: ' .. commit_msg)

            -- Create a buffer for editing
            local buf = vim.api.nvim_create_buf(false, true)
            vim.api.nvim_buf_set_option(buf, 'buftype', 'nofile')
            vim.api.nvim_buf_set_option(buf, 'bufhidden', 'wipe')
            vim.api.nvim_buf_set_name(buf, 'COMMIT_EDITMSG')
            vim.api.nvim_buf_set_option(buf, 'filetype', 'gitcommit')

            -- Add the instructions and commit message
            local buffer_text = {
                '# Edit commit message (generated by lumen)',
                '# Press <leader>s to save and commit, or :q! to cancel',
                '#',
                commit_msg,
            }
            vim.api.nvim_buf_set_lines(buf, 0, -1, false, buffer_text)

            -- Calculate dimensions
            local width = math.min(80, math.floor(vim.o.columns * 0.8))
            local height = math.min(20, math.floor(vim.o.lines * 0.7))
            local col = math.floor((vim.o.columns - width) / 2)
            local row = math.floor((vim.o.lines - height) / 2)

            -- Open window
            local win = vim.api.nvim_open_win(buf, true, {
                relative = 'editor',
                width = width,
                height = height,
                col = col,
                row = row,
                border = 'rounded',
                style = 'minimal',
                title = 'Edit Commit Message',
                title_pos = 'center',
            })

            -- Move cursor to the message line
            vim.api.nvim_win_set_cursor(win, { 4, 0 })

            -- Set keymaps for this buffer only
            local opts = { noremap = true, silent = true, buffer = buf }

            -- Map <leader>s to save and continue
            vim.keymap.set('n', '<leader>s', function()
                -- Extract user's message, skipping comment lines
                local lines = {}
                for _, line in
                    ipairs(vim.api.nvim_buf_get_lines(buf, 0, -1, false))
                do
                    if not line:match('^%s*#') then -- Skip comment lines
                        table.insert(lines, line)
                    end
                end

                local final_message =
                    table.concat(lines, '\n'):gsub('^%s*(.-)%s*$', '%1')
                vim.api.nvim_win_close(win, true)

                -- Continue with git commands
                execute_git_commands(final_message)
            end, opts)

            -- Display instruction
            vim.cmd('setlocal nomodified')
            vim.cmd('startinsert')
            log(
                'Edit commit message and press <leader>s to commit',
                vim.log.levels.INFO
            )
        end,
        on_stderr = function(_, data)
            if data and #data > 0 then
                log(
                    'lumen error: ' .. table.concat(data, '\n'),
                    vim.log.levels.ERROR
                )
            end
        end,
        on_exit = function(_, code)
            if code ~= 0 then
                log(
                    'lumen draft failed with code: ' .. code,
                    vim.log.levels.ERROR
                )
            end
        end,
    })
end

vim.keymap.set(
    'n',
    '<leader>ga',
    lumen_commit_push,
    { desc = 'AI commit and push (lumen)' }
)
